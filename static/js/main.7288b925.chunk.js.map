{"version":3,"sources":["App.js","components/BackgroundColor.js","components/LineColor.js","components/BarColor.js","components/MusicSelect.js","components/SwitchMicMusic.js","components/Datapoints.js","components/SoundRange.js","components/Height.js","components/BarMargin.js","components/LineWeight.js","components/BarType.js","components/LineType.js","components/LineFill.js","components/LineCircleSize.js","components/LineCircleShow.js","components/Selection.js","reportWebVitals.js","index.js"],"names":["App","useState","reload","setReload","global","refreshCanvas","theme","createMuiTheme","palette","type","className","id","variant","style","marginBottom","onClick","href","target","localStorage","clear","src","title","BackgroundColor","classes","color","getItem","formControl","shrink","marginTop","name","defaultValue","onChange","undefined","setItem","LineColor","FillColor","MusicSelect","fileName","setFileName","saveMusicToLocalStorage","e","result","console","log","Input","styled","display","htmlFor","float","file","files","startsWith","fileData","FileReader","onload","a","readAsDataURL","error","manageChange","component","SwitchMicMusic","micOrSound","marginRight","Datapoints","FormControl","InputLabel","Slider","getAriaValueText","value","valueLabelDisplay","step","marks","label","min","max","SoundRange","first","Number","split","last","React","setValue","event","newValue","Height","BarMargin","margin","setMargin","TextField","parseInt","LineWeight","lWeight","setLWeight","BarType","diagram","setDiagram","Select","labelId","displayEmpty","selectEmpty","MenuItem","LineType","LineFill","checked","setChecked","FormControlLabel","control","Checkbox","LineCircleSize","lCircleSize","setLCircleSize","LineCircleShow","useStyles","makeStyles","spacing","minWidth","Selection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7288b925.chunk.js","sourcesContent":["import {useState} from 'react';\nimport './App.css';\nimport Selection from './components/Selection';\nimport Button from '@material-ui/core/Button';\n\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport MusicSelect from \"./components/MusicSelect\";\nimport SwitchMicMusic from \"./components/SwitchMicMusic\";\n\nfunction App() {\n    const [reload, setReload] = useState(0);\n\n    global.refreshCanvas = () => {\n        setReload(reload + 1);\n    };\n\n    const theme = createMuiTheme({\n        palette: {\n            type: 'dark',\n        },\n    });\n    return (\n        <div className=\"App\">\n            <ThemeProvider theme={theme}>\n                <Selection key={reload}/>\n\n                <div id=\"full-screen\">\n                    <Button className=\"bottom-button\" variant=\"outlined\" style={{marginBottom: \"20px\"}}\n                            onClick={() => setReload(reload + 1)}>reload\n                        Cavas</Button> &nbsp;\n                    <Button className=\"bottom-button\" variant=\"outlined\" style={{marginBottom: \"20px\"}}\n                            href=\"/visualizer\" target=\"_blank\"> Open\n                        Visualizer in\n                        Fullscreen</Button> &nbsp;\n                    <Button className=\"bottom-button\" variant=\"outlined\" style={{marginBottom: \"20px\"}} onClick={() => {\n                        setReload(reload + 1);\n                        localStorage.clear()\n                    }}> Reset Visualizer</Button>\n                    <MusicSelect/>\n                    <SwitchMicMusic key={reload}/>\n                </div>\n            </ThemeProvider>\n            <iframe key={reload} src=\"/visualizer\" title={reload}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\n\r\nconst BackgroundColor = (classes) => {\r\n\r\n    let color = (localStorage.getItem('bcolor') === null ? '#000000' : localStorage.getItem('bcolor'));\r\n\r\n\r\n    const setColor = (color) => {\r\n        if (color !== undefined && localStorage.getItem('bcolor') !== color) {\r\n            localStorage.setItem('bcolor', color);\r\n        }\r\n        if (color === undefined) {\r\n            global.refreshCanvas();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Background Color\r\n            </InputLabel>\r\n            <ColorPicker style={{marginTop: \"18px\"}}\r\n                         name='color'\r\n                         defaultValue={color}\r\n                // value={this.state.color} - for controlled component\r\n\r\n                         onChange={setColor}\r\n\r\n            />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default BackgroundColor;","import React from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\n\r\nconst LineColor = (classes) => {\r\n\r\n    let color = (localStorage.getItem('linecolor') === null ? '#ffffff' : localStorage.getItem('linecolor'));\r\n\r\n    const setColor = (color) => {\r\n        if (color !== undefined && localStorage.getItem('linecolor') !== color) {\r\n            localStorage.setItem('linecolor', color);\r\n        }\r\n        if (color === undefined) {\r\n            global.refreshCanvas();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Line Color\r\n            </InputLabel>\r\n            <ColorPicker style={{marginTop: \"18px\"}}\r\n                         name='color'\r\n                         defaultValue={color}\r\n                // value={this.state.color} - for controlled component\r\n\r\n                         onChange={setColor}\r\n\r\n            />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default LineColor;","import React from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\n\r\nconst FillColor = (classes) => {\r\n\r\n    let color = (localStorage.getItem('fillcolor') === null ? '#ffffff' : localStorage.getItem('fillcolor'));\r\n\r\n    const setColor = (color) => {\r\n        if (color !== undefined && localStorage.getItem('fillcolor') !== color) {\r\n            localStorage.setItem('fillcolor', color);\r\n        }\r\n        if (color === undefined) {\r\n            global.refreshCanvas();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Fill Color\r\n            </InputLabel>\r\n            <ColorPicker style={{marginTop: \"18px\"}}\r\n                         name='color'\r\n                         defaultValue={color}\r\n                // value={this.state.color} - for controlled component\r\n\r\n                         onChange={setColor}\r\n\r\n            />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default FillColor;","import React, {useState} from 'react'\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {styled} from '@material-ui/core/styles';\r\n\r\n\r\nconst MusicSelect = () => {\r\n    const [fileName, setFileName] = useState(localStorage.getItem('musicName') === null ? \"\" : localStorage.getItem('musicData'));\r\n\r\n    const manageChange = (e) => {\r\n        let file = e.target.files[0];\r\n        if (file.type && !file.type.startsWith('audio/')) {\r\n            console.log('File is not an audio file.', file.type, file);\r\n            return;\r\n        }\r\n        try {\r\n            setFileName(file.name);\r\n            localStorage.setItem('musicName', file.name);\r\n            let fileData = new FileReader();\r\n            fileData.onload = async (e) => saveMusicToLocalStorage(e);\r\n            fileData.readAsDataURL(file);\r\n        }catch (e) {\r\n            console.error(e);\r\n            setFileName(e);\r\n        }\r\n    };\r\n\r\n\r\n    const saveMusicToLocalStorage = (e) => {\r\n        localStorage.setItem('musicData', e.target.result);\r\n        console.log(e.target.result);\r\n        setFileName(fileName + \" \" + e.target.result === null);\r\n        global.refreshCanvas();\r\n\r\n    };\r\n\r\n\r\n    const Input = styled('input')({\r\n        display: 'none',\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor=\"contained-button-file\" style={{float: \"right\", marginBottom: \"20px\"}}>\r\n                <span className=\"music-text\">{fileName}</span>\r\n                <Input id=\"contained-button-file\" type=\"file\"\r\n                       onChange={e => manageChange(e)}/>\r\n                <Button className=\"bottom-button\" variant=\"outlined\" component=\"span\">\r\n                    Select Song\r\n                </Button>\r\n            </label>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default MusicSelect;","import React, {useState} from 'react'\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {styled} from '@material-ui/core/styles';\r\n\r\n\r\nconst SwitchMicMusic = () => {\r\n    const [micOrSound, setFileName] = useState(localStorage.getItem('micOrSound') === null ? \"mic\" : localStorage.getItem('micOrSound'));\r\n\r\n    const changeInput = () => {\r\n        if (micOrSound === \"mic\") {\r\n            setFileName(\"sound\");\r\n            localStorage.setItem('micOrSound', \"sound\");\r\n        } else {\r\n            setFileName(\"mic\");\r\n            localStorage.setItem('micOrSound', \"mic\");\r\n        }\r\n        global.refreshCanvas();\r\n    };\r\n\r\n    return (\r\n        <label style={{float: \"right\"}}>\r\n            {micOrSound === \"sound\" &&\r\n            <span className=\"music-text\">Info: Press on the Canvas to Play/Pause</span>}\r\n            <Button className=\"bottom-button\" style={{marginRight: \"20px\"}} variant=\"outlined\"\r\n                    component=\"span\" onClick={changeInput}>\r\n                {micOrSound === \"mic\" ? \"Switch to a Sound File instead of Microphone Input\" : \"Switch to Microphone Input instead of the Sound File\"}\r\n            </Button>\r\n        </label>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default SwitchMicMusic;","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\nconst Datapoints = (classes) => {\r\n\r\n\r\n    const handleBarMultiple = (value) => {\r\n        if (localStorage.getItem('barMultiple') != value) {\r\n            localStorage.setItem('barMultiple', value);\r\n        }\r\n    }\r\n\r\n    const marks = [\r\n        {\r\n            value: 5,\r\n            label: '2^5 bars',\r\n        },\r\n        {\r\n            value: 8,\r\n            label: '2^8 bars',\r\n        },\r\n        {\r\n            value: 12,\r\n            label: '2^12 bars',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Amount of Datapoints\r\n            </InputLabel>\r\n            <Slider style={{marginTop: \"24px\"}}\r\n                    getAriaValueText={handleBarMultiple}\r\n                    aria-labelledby=\"discrete-slider\"\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={1}\r\n                    marks={marks}\r\n                    min={5}\r\n                    max={14}\r\n                    defaultValue={localStorage.getItem('barMultiple') === null ? 9 : localStorage.getItem('barMultiple')}\r\n            />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default Datapoints;","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\nconst SoundRange = (classes) => {\r\n    const first = localStorage.getItem('barRange') === null ? 0 : Number(localStorage.getItem('barRange').split(\",\")[0]);\r\n    const last = localStorage.getItem('barRange') === null ? 100 : Number(localStorage.getItem('barRange').split(\",\")[1]);\r\n\r\n    const [value, setValue] = React.useState([first, last]);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        if (localStorage.getItem('barRange') != value) {\r\n            localStorage.setItem('barRange', value);\r\n        }\r\n    };\r\n\r\n    const marks = [\r\n        {\r\n            value: 1,\r\n            label: '1',\r\n        },\r\n        {\r\n            value: 100,\r\n            label: '100',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Range\r\n            </InputLabel>\r\n            <Slider style={{marginTop: \"24px\"}}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    marks={marks}\r\n            />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default SoundRange;","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\nconst Height = (classes) => {\r\n\r\n\r\n    const handleHeight = (value) => {\r\n        if (localStorage.getItem('height') != value) {\r\n            localStorage.setItem('height', value);\r\n        }\r\n    }\r\n\r\n    const marks = [\r\n        {\r\n            value: 1,\r\n            label: '1',\r\n        },\r\n        {\r\n            value: 100,\r\n            label: '100',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Height\r\n            </InputLabel>\r\n            <Slider style={{marginTop: \"24px\"}}\r\n                    getAriaValueText={handleHeight}\r\n                    aria-labelledby=\"discrete-slider\"\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={1}\r\n                    marks={marks}\r\n                    min={0}\r\n                    max={100}\r\n                    defaultValue={localStorage.getItem('height') === null ? 50 : localStorage.getItem('height')}\r\n            />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default Height;","import React, {useState} from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nconst BarMargin = (classes) => {\r\n\r\n    const [margin, setMargin] = useState(localStorage.getItem('barMargin') === null ? 5 : localStorage.getItem('barMargin'));\r\n\r\n    const updateMargin = (e) => {\r\n        try {\r\n            if (e.target.value < 0) {\r\n                setMargin(0);\r\n                localStorage.setItem('barMargin', '0');\r\n            } else if (e.target.value > 1000) {\r\n                setMargin(1000);\r\n                localStorage.setItem('barMargin', '1000');\r\n            } else {\r\n                setMargin(parseInt(e.target.value));\r\n                if (e.target.value === '') {\r\n                    localStorage.setItem('barMargin', '0');\r\n                } else {\r\n                    localStorage.setItem('barMargin', '' + parseInt(e.target.value));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            setMargin(0);\r\n            localStorage.setItem('barMargin', '0');\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <TextField type=\"number\" id=\"standard-basic\" label=\"Bar Margin\" value={margin} onChange={updateMargin}/>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default BarMargin;","import React, {useState} from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nconst LineWeight = (classes) => {\r\n\r\n    const [lWeight, setLWeight] = useState(localStorage.getItem('lineWeight') === null ? 1 : localStorage.getItem('lineWeight'));\r\n\r\n    const updateMargin = (e) => {\r\n        try {\r\n            if (e.target.value < 0) {\r\n                setLWeight(0);\r\n                localStorage.setItem('lineWeight', '0');\r\n            } else if (e.target.value > 1000) {\r\n                setLWeight(1000);\r\n                localStorage.setItem('lineWeight', '1000');\r\n            } else {\r\n                setLWeight(parseInt(e.target.value));\r\n                if (e.target.value === '') {\r\n                    localStorage.setItem('lineWeight', '0');\r\n                } else {\r\n                    localStorage.setItem('lineWeight', '' + parseInt(e.target.value));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            setLWeight(0);\r\n            localStorage.setItem('lineWeight', '1');\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <TextField type=\"number\" id=\"standard-basic\" label=\"Line Weight\" value={lWeight} onChange={updateMargin}/>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default LineWeight;","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst BarType = (classes) => {\r\n    const [diagram, setDiagram] = React.useState(localStorage.getItem('vis') === null || localStorage.getItem('vis') === \"bars\" ? \"\" : localStorage.getItem('vis'));\r\n\r\n    const handleDiagram = (event) => {\r\n        setDiagram(event.target.value);\r\n        localStorage.setItem('type', \"bar\");\r\n        switch (event.target.value) {\r\n            case \"\":\r\n                localStorage.setItem('vis', \"bars\");\r\n                break;\r\n            case \"doubleBars\":\r\n                localStorage.setItem('vis', \"doubleBars\");\r\n                break;\r\n            case \"sidebars\":\r\n                localStorage.setItem('vis', \"sidebars\");\r\n                break;\r\n            case \"bar_circle\":\r\n                localStorage.setItem('vis', \"bar_circle\");\r\n                break;\r\n            case \"multiColor\":\r\n                localStorage.setItem('vis', \"multiColor\");\r\n                break;\r\n            default:\r\n                localStorage.setItem('vis', \"bars\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Bar Diagrams\r\n            </InputLabel>\r\n            <Select\r\n                labelId=\"demo-simple-select-placeholder-label-label\"\r\n                id=\"demo-simple-select-placeholder-label\"\r\n                value={diagram}\r\n                onChange={handleDiagram}\r\n                displayEmpty\r\n                className={classes.selectEmpty}\r\n            >\r\n                <MenuItem value={\"\"}>Bars</MenuItem>\r\n                <MenuItem value={\"doubleBars\"}>Double Bars</MenuItem>\r\n                <MenuItem value={\"sidebars\"}>Sidebars</MenuItem>\r\n                <MenuItem value={\"bar_circle\"}>Circle</MenuItem>\r\n                <MenuItem value={\"multiColor\"}>Multi Color</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default BarType;","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst LineType = (classes) => {\r\n    const [diagram, setDiagram] = React.useState(getLS);\r\n\r\n    function getLS() {\r\n        if (localStorage.getItem('vis') === null) {\r\n            return \"none\";\r\n        } else if (localStorage.getItem('vis') === \"line\") {\r\n            return \"\";\r\n        } else {\r\n            return localStorage.getItem('vis');\r\n        }\r\n\r\n    }\r\n\r\n    const handleDiagram = (event) => {\r\n        setDiagram(event.target.value);\r\n        localStorage.setItem('type', \"line\");\r\n        switch (event.target.value) {\r\n            case \"\":\r\n                localStorage.setItem('vis', \"line\");\r\n                break;\r\n            case \"line_circle\":\r\n                localStorage.setItem('vis', \"line_circle\");\r\n                break;\r\n            default:\r\n                localStorage.setItem('vis', \"line\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Line Diagrams\r\n            </InputLabel>\r\n            <Select\r\n                labelId=\"demo-simple-select-placeholder-label-label\"\r\n                id=\"demo-simple-select-placeholder-label\"\r\n                value={diagram}\r\n                onChange={handleDiagram}\r\n                displayEmpty\r\n                className={classes.selectEmpty}\r\n            >\r\n                <MenuItem value={\"\"}>Line</MenuItem>\r\n                <MenuItem value={\"line_circle\"}>Circle</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default LineType;","import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst LineFill = (classes) => {\r\n    const [checked, setChecked] = React.useState(localStorage.getItem('lineFill') === null ? false : 'true' === localStorage.getItem('lineFill'));\r\n\r\n    const handleChange = (event) => {\r\n        setChecked(event.target.checked);\r\n        localStorage.setItem('lineFill', event.target.checked)\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <FormControlLabel className={classes.formControl} style={{color: \"#b9b9bb\"}}\r\n                              control={\r\n                                  <Checkbox\r\n                                      checked={checked}\r\n                                      onChange={handleChange}\r\n                                      name=\"checkedB\"\r\n                                      color=\"primary\"\r\n                                  />\r\n                              }\r\n                              label=\"Fill\"\r\n            />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default LineFill;","import React, {useState} from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nconst LineCircleSize = (classes) => {\r\n\r\n    const [lCircleSize, setLCircleSize] = useState(localStorage.getItem('lineCircleSize') === null ? 60 : localStorage.getItem('lineCircleSize'));\r\n\r\n    const updateMargin = (e) => {\r\n        try {\r\n            if (e.target.value < 0) {\r\n                setLCircleSize(0);\r\n                localStorage.setItem('lineCircleSize', '0');\r\n            } else if (e.target.value > 1000) {\r\n                setLCircleSize(1000);\r\n                localStorage.setItem('lineCircleSize', '1000');\r\n            } else {\r\n                setLCircleSize(parseInt(e.target.value));\r\n                if (e.target.value === '') {\r\n                    localStorage.setItem('lineCircleSize', '0');\r\n                } else {\r\n                    localStorage.setItem('lineCircleSize', '' + parseInt(e.target.value));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            setLCircleSize(0);\r\n            localStorage.setItem('lineCircleSize', '1');\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <TextField type=\"number\" id=\"standard-basic\" label=\"Line CircleSize\" value={lCircleSize}\r\n                       onChange={updateMargin}/>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default LineCircleSize;","import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst LineCircleShow = (classes) => {\r\n    const [checked, setChecked] = React.useState(localStorage.getItem('showLineCircle') === null ? false : 'true' === localStorage.getItem('showLineCircle'));\r\n\r\n    const handleChange = (event) => {\r\n        setChecked(event.target.checked);\r\n        localStorage.setItem('showLineCircle', event.target.checked)\r\n    };\r\n\r\n    return (\r\n        <FormControl className={\"all-form-inputs \" + classes.formControl}>\r\n            <FormControlLabel className={classes.formControl} style={{color: \"#b9b9bb\"}}\r\n                              control={\r\n                                  <Checkbox\r\n                                      checked={checked}\r\n                                      onChange={handleChange}\r\n                                      name=\"checkedB\"\r\n                                      color=\"primary\"\r\n                                  />\r\n                              }\r\n                              label=\"Show Circle\"\r\n            />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default LineCircleShow;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Datapoints from './Datapoints';\r\nimport BackgroundColor from './BackgroundColor';\r\nimport SoundRange from './SoundRange';\r\nimport Height from './Height';\r\nimport BarMargin from \"./BarMargin\";\r\nimport LineColor from \"./LineColor\";\r\nimport LineWeight from \"./LineWeight\";\r\nimport BarType from \"./BarType\";\r\nimport LineType from \"./LineType\";\r\nimport LineFill from \"./LineFill\";\r\nimport FillColor from \"./BarColor\";\r\nimport LineCircleSize from \"./LineCircleSize\";\r\nimport LineCircleShow from \"./LineCircleShow\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst Selection = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div style={{margin: \"20px\"}}>\r\n            <div className=\"s-container\">\r\n                <BarType classes={classes}/>\r\n                <BarMargin classes={classes}/>\r\n            </div>\r\n            <div className=\"s-container\">\r\n                <LineType classes={classes}/>\r\n                <LineCircleSize classes={classes}/>\r\n                <LineFill classes={classes}/>\r\n                <LineCircleShow classes={classes}/>\r\n            </div>\r\n            <div className=\"s-container\">\r\n                <Datapoints classes={classes}/>\r\n                <SoundRange classes={classes}/>\r\n                <Height classes={classes}/>\r\n                <LineColor classes={classes}/>\r\n                <LineWeight classes={classes}/>\r\n                <FillColor classes={classes}/>\r\n                <BackgroundColor classes={classes}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Selection;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}